from .watch_options import *
from .misc import polybytes as polybytes, polystr as polystr
from _typeshed import Incomplete

GPSD_PORT: str

class gpscommon:
    host: str
    port = GPSD_PORT
    stream_command: bytes
    linebuffer: bytes
    received: Incomplete
    reconnect: Incomplete
    verbose: Incomplete
    sock: Incomplete
    bresponse: bytes
    response: Incomplete
    def __init__(self, host: str = ..., port=..., verbose: int = ..., should_reconnect: bool = ...) -> None: ...
    def connect(self, host, port) -> None: ...
    def close(self) -> None: ...
    def __del__(self) -> None: ...
    def waiting(self, timeout: int = ...): ...
    def read(self): ...
    def data(self): ...
    def send(self, commands) -> None: ...

class json_error(BaseException):
    data: Incomplete
    explanation: Incomplete
    def __init__(self, data, explanation) -> None: ...

class gpsjson:
    data: Incomplete
    stream_command: Incomplete
    enqueued: Incomplete
    verbose: int
    def __init__(self) -> None: ...
    def __iter__(self): ...
    def unpack(self, buf) -> None: ...
    def stream(self, flags: int = ..., devpath: Incomplete | None = ...) -> None: ...
    def generate_stream_command(self, flags: int = ..., devpath: Incomplete | None = ...): ...
    @staticmethod
    def generate_stream_command_old_style(flags: int = ...): ...
    @staticmethod
    def generate_stream_command_new_style(flags: int = ..., devpath: Incomplete | None = ...): ...

class dictwrapper:
    __dict__: Incomplete
    def __init__(self, ddict) -> None: ...
    def get(self, k, d: Incomplete | None = ...): ...
    def keys(self): ...
    def __getitem__(self, key): ...
    def __iter__(self): ...
    def __setitem__(self, key, val) -> None: ...
    def __contains__(self, key) -> bool: ...
    def __len__(self) -> int: ...
