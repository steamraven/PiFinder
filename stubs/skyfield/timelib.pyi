import datetime as dt_module
from ._compatibility import interp as interp
from .constants import ASEC2RAD as ASEC2RAD, B1950 as B1950, DAY_S as DAY_S, T0 as T0, tau as tau
from .curvelib import Splines as Splines, build_spline_given_ends as build_spline_given_ends
from .descriptorlib import reify as reify
from .earthlib import earth_rotation_angle as earth_rotation_angle, sidereal_time as sidereal_time
from .functions import A as A, load_bundled_npy as load_bundled_npy, mxm as mxm, mxmxm as mxmxm, rot_x as rot_x, rot_y as rot_y, rot_z as rot_z
from .nutationlib import build_nutation_matrix as build_nutation_matrix, equation_of_the_equinoxes_complimentary_terms as equation_of_the_equinoxes_complimentary_terms, iau2000a_radians as iau2000a_radians, mean_obliquity as mean_obliquity
from .precessionlib import compute_precession as compute_precession
from _typeshed import Incomplete
from numpy import ndarray
from typing import NamedTuple

DAY_US: float
GREGORIAN_START: int
GREGORIAN_START_ENGLAND: int

class CalendarTuple(NamedTuple):
    year: Incomplete
    month: Incomplete
    day: Incomplete
    hour: Incomplete
    minute: Incomplete
    second: Incomplete

class CalendarArray(ndarray):
    @property
    def year(self): ...
    @property
    def month(self): ...
    @property
    def day(self): ...
    @property
    def hour(self): ...
    @property
    def minute(self): ...
    @property
    def second(self): ...

utc: Incomplete

class UTC(dt_module.tzinfo):
    zero: Incomplete
    def utcoffset(self, dt): ...
    def tzname(self, dt): ...
    def dst(self, dt): ...

MONTH_NAMES: Incomplete
tt_minus_tai: Incomplete

class Timescale:
    polar_motion_table: Incomplete
    delta_t_function: Incomplete
    delta_t_table: Incomplete
    J2000: Incomplete
    B1950: Incomplete
    julian_calendar_cutoff: Incomplete
    def __init__(self, delta_t_recent, leap_dates, leap_offsets) -> None: ...
    def now(self): ...
    def from_datetime(self, datetime:dt_module.datetime) -> Time: ...
    def from_datetimes(self, datetime_list): ...
    def utc(self, year, month: int = ..., day: int = ..., hour: int = ..., minute: int = ..., second: float = ...): ...
    def tai(self, year: Incomplete | None = ..., month: int = ..., day: int = ..., hour: int = ..., minute: int = ..., second: float = ..., jd: Incomplete | None = ...): ...
    def tai_jd(self, jd, fraction: Incomplete | None = ...): ...
    def tt(self, year: Incomplete | None = ..., month: int = ..., day: int = ..., hour: int = ..., minute: int = ..., second: float = ..., jd: Incomplete | None = ...): ...
    def tt_jd(self, jd, fraction: Incomplete | None = ...): ...
    def J(self, year): ...
    def tdb(self, year: Incomplete | None = ..., month: int = ..., day: int = ..., hour: int = ..., minute: int = ..., second: float = ..., jd: Incomplete | None = ...): ...
    def tdb_jd(self, jd, fraction: Incomplete | None = ...): ...
    def ut1(self, year: Incomplete | None = ..., month: int = ..., day: int = ..., hour: int = ..., minute: int = ..., second: float = ..., jd: Incomplete | None = ...): ...
    def ut1_jd(self, jd): ...
    def from_astropy(self, t): ...
    def linspace(self, t0, t1, num: int = ...): ...

class Time:
    ts: Incomplete
    whole: Incomplete
    tt_fraction: Incomplete
    shape: Incomplete
    def __init__(self, ts, tt, tt_fraction: Incomplete | None = ...) -> None: ...
    def __len__(self) -> int: ...
    def __getitem__(self, index): ...
    def astimezone(self, tz): ...
    def astimezone_and_leap_second(self, tz): ...
    def toordinal(self): ...
    def utc_datetime(self): ...
    def utc_datetime_and_leap_second(self): ...
    def utc_iso(self, delimiter: str = ..., places: int = ...): ...
    def utc_jpl(self): ...
    def utc_strftime(self, format: str = ...): ...
    def tai_calendar(self): ...
    def tt_calendar(self): ...
    def tdb_calendar(self): ...
    def ut1_calendar(self): ...
    def tai_strftime(self, format: str = ...): ...
    def tt_strftime(self, format: str = ...): ...
    def tdb_strftime(self, format: str = ...): ...
    def ut1_strftime(self, format: str = ...): ...
    def M(self): ...
    def MT(self): ...
    def C(self): ...
    def CT(self): ...
    def J(self): ...
    def utc(self): ...
    def tai_fraction(self): ...
    def tdb_fraction(self): ...
    def ut1_fraction(self): ...
    def delta_t(self): ...
    def dut1(self): ...
    def gmst(self): ...
    def gast(self): ...
    @property
    def tai(self): ...
    @property
    def tt(self): ...
    @property
    def tdb(self): ...
    @property
    def ut1(self): ...
    def polar_motion_angles(self): ...
    def polar_motion_matrix(self): ...
    def nutation_matrix(self): ...
    def precession_matrix(self): ...
    def __eq__(self, other_time): ...
    def __add__(self, other_time): ...
    def __sub__(self, other_time): ...
    def __hash__(self): ...
    def to_astropy(self): ...
    P: Incomplete
    N: Incomplete
    def PT(self): ...
    def NT(self): ...

def julian_day(year, month: int = ..., day: int = ..., julian_before: Incomplete | None = ...): ...
def julian_date(year, month: int = ..., day: int = ..., hour: int = ..., minute: int = ..., second: float = ...): ...
def julian_date_of_besselian_epoch(b): ...
def compute_calendar_date(jd_integer, julian_before: Incomplete | None = ...): ...
calendar_date = compute_calendar_date

def calendar_tuple(jd_float, fraction: float = ..., julian_before: Incomplete | None = ...): ...
def tdb_minus_tt(jd_tdb, fraction_tdb: float = ...): ...

class DeltaT:
    table_tt: Incomplete
    table_delta_t: Incomplete
    long_term_function: Incomplete
    def __init__(self, table_tt, table_delta_t, long_term_function) -> None: ...
    def __call__(self, tt): ...

delta_t_parabola_stephenson_morrison_hohenkerk_2016: Incomplete
delta_t_parabola_morrison_stephenson_2004: Incomplete

def build_delta_t(delta_t_recent): ...
def build_delta_t_table(delta_t_recent): ...
