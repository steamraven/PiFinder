from .constants import ANGVEL as ANGVEL, DAY_S as DAY_S, RAD2DEG as RAD2DEG, T0 as T0, pi as pi, tau as tau
from .descriptorlib import reify as reify
from .earthlib import refract as refract
from .framelib import itrs as itrs
from .functions import angular_velocity_matrix as angular_velocity_matrix, mxm as mxm, mxv as mxv, rot_y as rot_y, rot_z as rot_z
from .units import Angle as Angle, Distance as Distance
from .vectorlib import VectorFunction as VectorFunction
from _typeshed import Incomplete

class ITRSPosition(VectorFunction):
    center: int
    itrs_xyz: Incomplete
    def __init__(self, itrs_xyz) -> None: ...
    @property
    def target(self): ...

class GeographicPosition(ITRSPosition):
    vector_name: str
    model: Incomplete
    latitude: Incomplete
    longitude: Incomplete
    elevation: Incomplete
    def __init__(self, model, latitude, longitude, elevation, itrs_xyz) -> None: ...
    def target_name(self): ...
    def lst_hours_at(self, t): ...
    def refract(self, altitude_degrees, temperature_C, pressure_mbar): ...
    def rotation_at(self, t): ...

class Geoid:
    name: Incomplete
    radius: Incomplete
    inverse_flattening: Incomplete
    def __init__(self, name, radius_m, inverse_flattening) -> None: ...
    def latlon(self, latitude_degrees: float, longitude_degrees: float, elevation_m: float = ..., cls=...)-> GeographicPosition: ...
    def latlon_of(self, position): ...
    def height_of(self, position): ...
    def geographic_position_of(self, position): ...
    def subpoint_of(self, position): ...
    subpoint = geographic_position_of

wgs84: Geoid
iers2010: Geoid

class Topos(GeographicPosition):
    R_lat: Incomplete
    def __init__(self, latitude: Incomplete | None = ..., longitude: Incomplete | None = ..., latitude_degrees: Incomplete | None = ..., longitude_degrees: Incomplete | None = ..., elevation_m: float = ..., x: float = ..., y: float = ...) -> None: ...
    def itrf_xyz(self): ...
