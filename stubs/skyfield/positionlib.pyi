from . import framelib as framelib
from .constants import ANGVEL as ANGVEL, AU_M as AU_M, C as C, DAY_S as DAY_S, ERAD as ERAD, RAD2DEG as RAD2DEG, pi as pi, tau as tau
from .descriptorlib import reify as reify
from .earthlib import compute_limb_angle as compute_limb_angle
from .functions import angle_between as angle_between, from_spherical as from_spherical, length_of as length_of, mxm as mxm, mxv as mxv, rot_z as rot_z, to_spherical as to_spherical
from .geometry import intersect_line_and_sphere as intersect_line_and_sphere
from .relativity import add_aberration as add_aberration, add_deflection as add_deflection
from .timelib import Time as Time
from .units import Angle as Angle, AngleRate as AngleRate, Distance as Distance, Velocity as Velocity
from .starlib import Star
from _typeshed import Incomplete

def build_position(position_au, velocity_au_per_d: Incomplete | None = ..., t: Incomplete | None = ..., center: Incomplete | None = ..., target: Incomplete | None = ...) -> ICRF: ...
def position_of_radec(ra_hours: float, dec_degrees: float, distance_au=..., epoch: Time | None = ..., t: Incomplete | None = ..., center: Incomplete | None = ..., target: Incomplete | None = ...) -> ICRF: ...
def position_from_radec(ra_hours, dec_degrees, distance: float = ..., epoch: Incomplete | None = ..., t: Incomplete | None = ..., center: Incomplete | None = ..., target: Incomplete | None = ...): ...

class ICRF:
    center_barycentric: Incomplete
    t: Incomplete
    position: Incomplete
    velocity: Incomplete
    center: Incomplete
    target: Incomplete
    def __init__(self, position_au, velocity_au_per_d: Incomplete | None = ..., t: Incomplete | None = ..., center: Incomplete | None = ..., target: Incomplete | None = ...) -> None: ...
    @classmethod
    def from_radec(cls, ra_hours: float, dec_degrees: float, distance_au=..., epoch: Incomplete | None = ...) -> ICRF: ...
    @classmethod
    def from_time_and_frame_vectors(cls, t, frame, distance, velocity): ...
    def __sub__(self, body): ...
    def __getitem__(self, i): ...
    def __neg__(self): ...
    def distance(self): ...
    def speed(self): ...
    def light_time(self): ...
    def radec(self, epoch: Time | None = ...) -> tuple[Angle, Angle, Distance]: ...
    def hadec(self): ...
    def separation_from(self, another_icrf: ICRF) -> Angle: ...
    def cirs_xyz(self, epoch): ...
    def cirs_radec(self, epoch): ...
    def ecliptic_xyz(self, epoch: Incomplete | None = ...): ...
    def ecliptic_velocity(self): ...
    def ecliptic_latlon(self, epoch: Incomplete | None = ...): ...
    def galactic_xyz(self): ...
    def galactic_latlon(self): ...
    ecliptic_position = ecliptic_xyz
    galactic_position = galactic_xyz
    def frame_xyz(self, frame): ...
    def frame_xyz_and_velocity(self, frame): ...
    def frame_latlon(self, frame): ...
    def frame_latlon_and_rates(self, frame): ...
    def to_skycoord(self, unit: Incomplete | None = ...): ...
    def phase_angle(self, sun): ...
    def fraction_illuminated(self, sun): ...
    def is_sunlit(self, ephemeris): ...
    def is_behind_earth(self): ...
    def from_altaz(self, alt: float | None = ..., az: float | None = ..., alt_degrees: float | None = ..., az_degrees: float | None = ..., distance: Distance=...) -> Apparent: ...
ICRS = ICRF

class Geometric(ICRF):
    def altaz(self, temperature_C: Incomplete | None = ..., pressure_mbar: str = ...): ...

class Barycentric(ICRF):
    def observe(self, body: Star) -> Astrometric: ...

class Astrometric(ICRF):
    def apparent(self) -> Apparent: ...

class Apparent(ICRF):
    def altaz(self, temperature_C: float| str | None = ..., pressure_mbar: str  = ...) -> tuple[Angle, Angle, Distance]: ...

class Geocentric(ICRF):
    def itrf_xyz(self): ...
    def subpoint(self): ...

class _Fake(ICRF):
    position: Incomplete
    t: Incomplete
    def __init__(self, original, epoch) -> None: ...

def ITRF_to_GCRS(t, rITRF): ...
def ITRF_to_GCRS2(t, rITRF, vITRF, _high_accuracy: bool = ...): ...
