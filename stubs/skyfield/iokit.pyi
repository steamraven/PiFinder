from .curvelib import Splines as Splines
from .data import iers as iers
from .functions import load_bundled_npy as load_bundled_npy
from .io_timescale import parse_deltat_data as parse_deltat_data, parse_deltat_preds as parse_deltat_preds, parse_leap_seconds as parse_leap_seconds
from .jpllib import SpiceKernel as SpiceKernel
from .sgp4lib import EarthSatellite as EarthSatellite
from .timelib import Timescale as Timescale
from _typeshed import Incomplete
from collections.abc import Generator
from typing import IO



class Loader:
    directory: Incomplete
    verbose: Incomplete
    events: Incomplete
    urls: Incomplete
    parsers: Incomplete
    openers: Incomplete
    def __init__(self, directory, verbose: bool = ..., expire: bool = ...) -> None: ...
    def path_to(self, filename): ...
    def days_old(self, filename): ...
    def __call__(self, filename, reload: bool = ..., backup: bool = ..., builtin: bool = ...): ...
    def build_url(self, filename): ...
    def tle(self, url, reload: bool = ..., filename: Incomplete | None = ...): ...
    def tle_file(self, url, reload: bool = ..., filename: Incomplete | None = ..., ts: Incomplete | None = ..., skip_names: bool = ...): ...
    def download(self, url, filename: Incomplete | None = ..., backup: bool = ...): ...
    def open(self, url: str, mode: str = ..., reload: bool = ..., filename: Incomplete | None = ..., backup: bool = ...) -> IO[bytes]: ...
    def timescale(self, delta_t: Incomplete | None = ..., builtin: bool = ...) -> Timescale: ...
    @property
    def log(self): ...

def load_file(path): ...
def parse_tle(fileobj) -> Generator[Incomplete, None, None]: ...
def parse_tle_file(lines, ts: Incomplete | None = ..., skip_names: bool = ...) -> Generator[Incomplete, None, None]: ...
def download(url, path, verbose: Incomplete | None = ..., blocksize=..., backup: bool = ...) -> None: ...

class ProgressBar:
    filename: Incomplete
    t0: int
    def __init__(self, path) -> None: ...
    def report(self, bytes_so_far, bytes_total) -> None: ...
