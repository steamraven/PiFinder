from .constants import AU_KM as AU_KM, AU_M as AU_M, C as C, DAY_S as DAY_S, tau as tau
from .descriptorlib import reify as reify
from .functions import length_of as length_of
from _typeshed import Incomplete

class UnpackingError(Exception): ...

class Unit:
    def __getitem__(self, *args) -> None: ...
    __iter__ = __getitem__

class getset:
    name: Incomplete
    __doc__: Incomplete
    conversion_factor: Incomplete
    core_unit: Incomplete
    def __init__(self, name, docstring, conversion_factor: Incomplete | None = ..., core_unit: Incomplete | None = ...) -> None: ...
    def __get__(self, instance, objtype: Incomplete | None = ...): ...

class Distance(Unit):
    au: Incomplete
    km: Incomplete
    m: Incomplete
    def __init__(self, au: Incomplete | None = ..., km: Incomplete | None = ..., m: Incomplete | None = ...) -> None: ...
    @classmethod
    def from_au(cls, au): ...
    def length(self): ...
    def light_seconds(self): ...
    def to(self, unit): ...

class Velocity(Unit):
    km_per_s: Incomplete
    au_per_d: Incomplete
    def __init__(self, au_per_d: Incomplete | None = ..., km_per_s: Incomplete | None = ...) -> None: ...
    m_per_s: Incomplete
    def to(self, unit): ...

class AngleRate:
    def radians(self): ...
    def degrees(self): ...
    def arcminutes(self): ...
    def arcseconds(self): ...
    def mas(self): ...

class Rate:
    def per_day(self): ...
    def per_hour(self): ...
    def per_minute(self): ...
    def per_second(self): ...

class Angle(Unit):
    _degrees: float
    degrees: float
    _hours: float
    hours: float
    radians: Incomplete
    preference: Incomplete
    signed: Incomplete
    def __init__(self, angle: Incomplete | None = ..., radians: Incomplete | None = ..., degrees: Incomplete | None = ..., hours: Incomplete | None = ..., preference: Incomplete | None = ..., signed: bool = ...) -> None: ...
    @classmethod
    def from_degrees(cls, degrees: float, signed: bool = ...) -> Angle: ...
    
    def arcminutes(self): ...
    def arcseconds(self): ...
    def mas(self): ...
    def hms(self, warn: bool = ...): ...
    def signed_hms(self, warn: bool = ...): ...
    def hstr(self, places: int = ..., warn: bool = ..., format=...): ...
    def dms(self, warn: bool = ...): ...
    def signed_dms(self, warn: bool = ...): ...
    def dstr(self, places: int = ..., warn: bool = ..., format: Incomplete | None = ...): ...
    def to(self, unit): ...

class WrongUnitError(ValueError):
    args: Incomplete
    def __init__(self, name) -> None: ...

def wms(whole, minutes: float = ..., seconds: float = ...): ...
