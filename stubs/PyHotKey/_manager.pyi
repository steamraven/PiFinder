#from ._key import ColdKey as ColdKey, Controller as Controller, HotKey as HotKey, Key as Key, Listener as Listener, WarmKey as WarmKey, WetKey as WetKey, cold_keys as cold_keys, event_filter as event_filter, filter_name as filter_name
from _typeshed import Incomplete
from collections.abc import Generator
from typing import Callable
from typing_extensions import ParamSpec

from pynput.keyboard import Key as Key

Callback = Callable[[int], None]


class KeyboardManager:
    def __init__(self) -> None: ...
    @property
    def logger(self): ...
    def set_log_file(self, path, mode: str = ...): ...
    def press(self, key) -> None: ...
    def release(self, key) -> None: ...
    def tap(self, key) -> None: ...
    def pressed(self, *keys) -> Generator[Incomplete, None, None]: ...
    def type(self, string) -> None: ...
    def register_hotkey(self, keys:list[Key|str], count: int | None, func: Callback, arg: int) -> int: ...
    def unregister_hotkey_by_id(self, id_): ...
    def unregister_hotkey_by_keys(self, keys): ...
    def unregister_all_hotkeys(self): ...
    def set_wetkey_on_press(self, key: Key|str, func: Callback, arg: int)->bool: ...
    def set_wetkey_on_release(self, key: Key|str, func: Callback, arg: int) ->bool: ...
    def remove_wetkey(self, key): ...
    def remove_wetkey_on_press(self, key): ...
    def remove_wetkey_on_release(self, key): ...
    def remove_all_wetkeys(self): ...
    def start_recording_hotkey_single(self, callback): ...
    def start_recording_hotkey_multiple(self, callback): ...
    def stop_recording(self) -> None: ...
    @property
    def hotkeys(self): ...
    @property
    def pressed_keys(self): ...
    @property
    def wetkeys(self): ...
    @property
    def recording(self): ...
    @property
    def suppress(self): ...
    @property
    def strict_mode(self): ...
    @property
    def ttl(self): ...
    @property
    def interval(self): ...
    @property
    def running(self): ...
    def start(self): ...
    def wait(self) -> None: ...
    def stop(self) -> None: ...

keyboard_manager: KeyboardManager
