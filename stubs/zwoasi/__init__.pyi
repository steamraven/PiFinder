import ctypes as c
from _typeshed import Incomplete
from typing import Union
import numpy.typing as npt
import numpy as np

def get_num_cameras()->int: ...
def list_cameras() -> list[str]: ...

class ZWO_Error(Exception):
    def __init__(self, message) -> None: ...

class ZWO_IOError(ZWO_Error):
    error_code: Incomplete
    def __init__(self, message, error_code: Incomplete | None = ...) -> None: ...

class ZWO_CaptureError(ZWO_Error):
    exposure_status: Incomplete
    def __init__(self, message, exposure_status: Incomplete | None = ...) -> None: ...

class Camera:
    id: Incomplete
    default_timeout: int
    closed: bool
    def __init__(self, id_) -> None: ...
    def __del__(self) -> None: ...
    def get_camera_property(self): ...
    def get_num_controls(self): ...
    def get_controls(self) -> dict[str, dict[str, int|float]]: ...
    def set_controls(self) -> None: ...
    def get_roi_format(self): ...
    def set_roi_format(self, width, height, bins, image_type) -> None: ...
    def get_roi_start_position(self): ...
    def set_roi_start_position(self, start_x, start_y) -> None: ...
    def get_dropped_frames(self): ...
    def get_camera_support_mode(self): ...
    def get_camera_mode(self): ...
    def set_camera_mode(self, mode) -> None: ...
    def send_soft_trigger(self, bStart) -> None: ...
    def set_trigger_output_io_conf(self, pin, bPinHigh, iDelay, iDuration) -> None: ...
    def get_trigger_output_io_conf(self, pin): ...
    def close(self) -> None: ...
    def get_roi(self): ...
    def set_roi(self, start_x: Incomplete | None = ..., start_y: Incomplete | None = ..., width: Incomplete | None = ..., height: Incomplete | None = ..., bins: Incomplete | None = ..., image_type: Incomplete | None = ...) -> None: ...
    def get_control_value(self, control_type): ...
    def set_control_value(self, control_type: int, value: int|float, auto: bool = ...) -> None: ...
    def get_bin(self): ...
    def start_exposure(self, is_dark: bool = ...) -> None: ...
    def stop_exposure(self) -> None: ...
    def get_exposure_status(self): ...
    def get_data_after_exposure(self, buffer_: Incomplete | None = ...): ...
    def enable_dark_subtract(self, filename) -> None: ...
    def disable_dark_subtract(self) -> None: ...
    def start_video_capture(self): ...
    def stop_video_capture(self): ...
    def get_video_data(self, timeout: Incomplete | None = ..., buffer_: Incomplete | None = ...): ...
    def pulse_guide_on(self, direction) -> None: ...
    def pulse_guide_off(self, direction) -> None: ...
    def get_id(self): ...
    def set_id(self, new_id) -> None: ...
    def get_image_type(self): ...
    def set_image_type(self, image_type: int) -> None: ...
    def capture(self, initial_sleep: float = ..., poll: float = ..., buffer_: Incomplete | None = ..., filename: Incomplete | None = ...) -> npt.NDArray[Union[np.uint8, np.uint16]]: ...
    def capture_video_frame(self, buffer_: Incomplete | None = ..., filename: Incomplete | None = ..., timeout: Incomplete | None = ...): ...
    def get_control_values(self): ...
    def auto_exposure(self, auto=...): ...
    def auto_wb(self, wb=...): ...

class _ASI_CAMERA_INFO(c.Structure):
    def get_dict(self): ...

class _ASI_CONTROL_CAPS(c.Structure):
    def get_dict(self): ...

class _ASI_ID(c.Structure):
    def get_id(self): ...

class _ASI_SUPPORTED_MODE(c.Structure):
    def get_dict(self): ...

def init(library_file: str | None = ...) -> None: ...

logger: Incomplete
ASI_BAYER_RG: int
ASI_BAYER_BG: int
ASI_BAYER_GR: int
ASI_BAYER_RB: int
ASI_IMG_RAW8: int
ASI_IMG_RGB24: int
ASI_IMG_RAW16: int
ASI_IMG_Y8: int
ASI_IMG_END: int
ASI_GUIDE_NORTH: int
ASI_GUIDE_SOUTH: int
ASI_GUIDE_EAST: int
ASI_GUIDE_WEST: int
ASI_GAIN: int
ASI_EXPOSURE: int
ASI_GAMMA: int
ASI_WB_R: int
ASI_WB_B: int
ASI_BRIGHTNESS: int
ASI_OFFSET: int
ASI_BANDWIDTHOVERLOAD: int
ASI_OVERCLOCK: int
ASI_TEMPERATURE: int
ASI_FLIP: int
ASI_AUTO_MAX_GAIN: int
ASI_AUTO_MAX_EXP: int
ASI_AUTO_MAX_BRIGHTNESS: int
ASI_HARDWARE_BIN: int
ASI_HIGH_SPEED_MODE: int
ASI_COOLER_POWER_PERC: int
ASI_TARGET_TEMP: int
ASI_COOLER_ON: int
ASI_MONO_BIN: int
ASI_FAN_ON: int
ASI_PATTERN_ADJUST: int
ASI_MODE_NORMAL: int
ASI_MODE_TRIG_SOFT_EDGE: int
ASI_MODE_TRIG_RISE_EDGE: int
ASI_MODE_TRIG_FALL_EDGE: int
ASI_MODE_TRIG_SOFT_LEVEL: int
ASI_MODE_TRIG_HIGH_LEVEL: int
ASI_MODE_TRIG_LOW_LEVEL: int
ASI_MODE_END: int
ASI_TRIG_OUTPUT_PINA: int
ASI_TRIG_OUTPUT_PINB: int
ASI_TRIG_OUTPUT_NONE: int
ASI_EXP_IDLE: int
ASI_EXP_WORKING: int
ASI_EXP_SUCCESS: int
ASI_EXP_FAILED: int
zwo_errors: Incomplete
zwolib: Incomplete
