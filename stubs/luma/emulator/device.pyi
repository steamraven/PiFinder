from _typeshed import Incomplete
from luma.core.device import device

class emulator(device):
    scale: Incomplete
    segment_mapper: Incomplete
    def __init__(self, width: Incomplete, height: Incomplete, rotate: Incomplete, mode: Incomplete, transform: Incomplete, scale: Incomplete) -> None: ...
    def show(self) -> None: ...
    def hide(self) -> None: ...
    def contrast(self, value: Incomplete) -> None: ...
    def cleanup(self) -> None: ...
    def to_surface(self, image: Incomplete, alpha: float = ...) -> Incomplete: ...

class capture(emulator):
    def __init__(self, width: int = ..., height: int = ..., rotate: int = ..., mode: str = ..., transform: str = ..., scale: int = ..., file_template: str = ..., **kwargs: Incomplete) -> None: ...
    def display(self, image: Incomplete) -> None: ...

class gifanim(emulator):
    def __init__(self, width: int = ..., height: int = ..., rotate: int = ..., mode: str = ..., transform: str = ..., scale: int = ..., filename: str = ..., duration: float = ..., loop: int = ..., max_frames: Incomplete | None = ..., **kwargs: Incomplete) -> None: ...
    def display(self, image: Incomplete) -> None: ...
    def write_animation(self) -> None: ...

class pygame(emulator):
    def __init__(self, width: int = ..., height: int = ..., rotate: int = ..., mode: str = ..., transform: str = ..., scale: int = ..., frame_rate: int = ..., **kwargs: Incomplete) -> None: ...
    def display(self, image: Incomplete) -> None: ...

class asciiart(emulator):
    def __init__(self, width: int = ..., height: int = ..., rotate: int = ..., mode: str = ..., transform: str = ..., scale: int = ..., **kwargs: Incomplete) -> None: ...
    def display(self, image: Incomplete) -> None: ...
    def cleanup(self) -> None: ...

class asciiblock(emulator):
    def __init__(self, width: int = ..., height: int = ..., rotate: int = ..., mode: str = ..., transform: str = ..., scale: int = ..., **kwargs: Incomplete) -> None: ...
    def display(self, image: Incomplete) -> None: ...
    def cleanup(self) -> None: ...
