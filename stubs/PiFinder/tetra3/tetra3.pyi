from _typeshed import Incomplete
from pathlib import Path
from typing_extensions import TypedDict, NotRequired
from typing import Optional
from PIL.Image import Image

class ImageSolution(TypedDict):
    RA: Optional[float]
    Dec: Optional[float]
    Roll: Optional[float]
    FOV: Optional[float]
    RMSE: Optional[float]
    Matches: Optional[int]
    Prob: Optional[float]
    T_solve: int
    T_extract: float
    RA_target: NotRequired[float]
    Dec_target: NotRequired[float]


class Tetra3:
    def __init__(self, load_database: str | Path = ..., debug_folder: Incomplete | None = ...) -> None: ...
    @property
    def debug_folder(self): ...
    @property
    def has_database(self): ...
    @property
    def star_table(self): ...
    @property
    def pattern_catalog(self): ...
    @property
    def pattern_largest_edge(self): ...
    @property
    def database_properties(self): ...
    def load_database(self, path: str = ...) -> None: ...
    def save_database(self, path) -> None: ...
    def generate_database(self, max_fov, min_fov: Incomplete | None = ..., save_as: Incomplete | None = ..., star_catalog: str = ..., pattern_stars_per_fov: int = ..., verification_stars_per_fov: int = ..., star_max_magnitude: int = ..., pattern_max_error: float = ..., simplify_pattern: bool = ..., range_ra: Incomplete | None = ..., range_dec: Incomplete | None = ..., presort_patterns: bool = ..., save_largest_edge: bool = ..., multiscale_step: float = ...): ...
    def solve_from_image(self, image: Image, fov_estimate: float | None = ..., fov_max_error: float | None = ..., pattern_checking_stars: int = ..., match_radius: float = ..., match_threshold: float = ..., solve_timeout: int | None = ..., target_pixel: Incomplete | None = ...)->ImageSolution: ...
    def solve_from_centroids(self, star_centroids, size, fov_estimate: float | None = ..., fov_max_error: Incomplete | None = ..., pattern_checking_stars: int = ..., match_radius: float = ..., match_threshold: float = ..., solve_timeout: int | None = ..., target_pixel: Incomplete | None = ...): ...

def get_centroids_from_image(image, sigma: int = ..., image_th: Incomplete | None = ..., crop: Incomplete | None = ..., downsample: Incomplete | None = ..., filtsize: int = ..., bg_sub_mode: str = ..., sigma_mode: str = ..., binary_open: bool = ..., centroid_window: Incomplete | None = ..., max_area: int = ..., min_area: int = ..., max_sum: Incomplete | None = ..., min_sum: Incomplete | None = ..., max_axis_ratio: Incomplete | None = ..., max_returned: Incomplete | None = ..., return_moments: bool = ..., return_images: bool = ...): ...
def crop_and_downsample_image(image, crop: Incomplete | None = ..., downsample: Incomplete | None = ..., sum_when_downsample: bool = ..., return_offsets: bool = ...): ...
