from . import Image as Image, ImageColor, ImageFont
from _typeshed import Incomplete

from ImageColor import _Ink
from ImageFont import _Font

_XY = tuple[float,float,float,float]

class ImageDraw:
    font: Incomplete
    palette: Incomplete
    im: Incomplete
    draw: Incomplete
    mode: Incomplete
    ink: Incomplete
    fontmode: str
    fill: bool
    def __init__(self, im, mode: Incomplete | None = ...) -> None: ...
    def getfont(self): ...
    def arc(self, xy: _XY, start: float, end: float, fill: _Ink | None = ..., width: int = ...) -> None: ...
    def bitmap(self, xy: _XY, bitmap, fill: _Ink | None = ...) -> None: ...
    def chord(self, xy: _XY, start, end, fill: _Ink | None = ..., outline: _Ink | None = ..., width: int = ...) -> None: ...
    def ellipse(self, xy: _XY, fill: _Ink | None = ..., outline: _Ink | None = ..., width: int = ...) -> None: ...
    def line(self, xy: _XY, fill: _Ink | None = ..., width: int = ..., joint: Incomplete | None = ...) -> None: ...
    def shape(self, shape, fill: _Ink | None = ..., outline: _Ink | None = ...) -> None: ...
    def pieslice(self, xy: _XY, start, end, fill: _Ink | None = ..., outline: _Ink | None = ..., width: int = ...) -> None: ...
    def point(self, xy: tuple[float,float], fill: _Ink | None = ...) -> None: ...
    def polygon(self, xy: _XY, fill: _Ink | None = ..., outline: _Ink | None = ..., width: int = ...) -> None: ...
    def regular_polygon(self, bounding_circle: tuple[float,float,float], n_sides: int, rotation: int = ..., fill: _Ink | None = ..., outline: _Ink | None = ..., width: int = ...) -> None: ...
    def rectangle(self, xy: _XY, fill: _Ink | None = ..., outline: _Ink | None = ..., width: int = ...) -> None: ...
    def rounded_rectangle(self, xy: _XY, radius: int = ..., fill: _Ink | None = ..., outline: _Ink | None = ..., width: int = ..., *, corners: Incomplete | None = ...): ...
    def text(self, xy: tuple[float, float], text: str, fill: _Ink | None = ..., font: _Font | None = ..., anchor: Incomplete | None = ..., spacing: int = ..., align: str = ..., direction: Incomplete | None = ..., features: Incomplete | None = ..., language: Incomplete | None = ..., stroke_width: int = ..., stroke_fill: _Ink | None = ..., embedded_color: bool = ...) -> None: ...
    def multiline_text(self, xy: tuple[float, float], text: str, fill: _Ink | None = ..., font: Incomplete | None = ..., anchor: Incomplete | None = ..., spacing: int = ..., align: str = ..., direction: Incomplete | None = ..., features: Incomplete | None = ..., language: Incomplete | None = ..., stroke_width: int = ..., stroke_fill: _Ink | None = ..., embedded_color: bool = ...) -> None: ...
    def textlength(self, text: str, font: _Font | None = ..., direction: Incomplete | None = ..., features: Incomplete | None = ..., language: Incomplete | None = ..., embedded_color: bool = ...) -> int: ...
    def textbbox(self, xy: _XY, text, font: Incomplete | None = ..., anchor: Incomplete | None = ..., spacing: int = ..., align: str = ..., direction: Incomplete | None = ..., features: Incomplete | None = ..., language: Incomplete | None = ..., stroke_width: int = ..., embedded_color: bool = ...): ...
    def multiline_textbbox(self, xy: _XY, text, font: Incomplete | None = ..., anchor: Incomplete | None = ..., spacing: int = ..., align: str = ..., direction: Incomplete | None = ..., features: Incomplete | None = ..., language: Incomplete | None = ..., stroke_width: int = ..., embedded_color: bool = ...): ...

def Draw(im: Image.Image, mode: Incomplete | None = ...) -> ImageDraw: ...

outline: _Ink

def getdraw(im: Incomplete | None = ..., hints: Incomplete | None = ...): ...
def floodfill(image, xy: _XY, value, border: Incomplete | None = ..., thresh: int = ...) -> None: ...
